#import pygame as pg
import multiprocessing as mp
import queue
import math
import time
import numpy as np
#from mpi4py import MPI
import unittest


V_MIN =  10.0
V_MAX =  42.0
A_MAX = 100.0

class Box:

    def __str__(self):
        return f"Box(xmin={self.xmin}, xmax={self.xmax}, "\
                   f"ymin={self.ymin}, ymax={self.ymax})"

    def get_x_limits(self):
        return (self.xmin, self.xmax)

    def get_y_limits(self):
        return (self.ymin, self.ymax)

class Puck:

    RADIUS = 1.0

    def __str__(self):
        return f"Puck(Id={self.id}, Alive={self.alive}, "\
               f"s={self.s}, v={self.v}, a={self.a}"

    def is_alive(self):
        return self.alive

    def get_id(self):
        return self.id

    def get_time(self):
        return self.t

    def get_position(self):
        return self.s

    def get_velocity(self):
        return self.v

    def get_acceleration(self):
        return self.a

    def get_name(self):
        return self.name

    def get_fuel(self):
        return self.fuel

    def get_points(self):
        return self.points


def insertionSort_t_ca(l2):
    m = len(l2)
    if m <= 1:
        return l2
    
    for i in range(1, m):
        key = l2[i]
        j = i - 1
        while j >= 0 and key < l2[j]:
            l2[j + 1] = l2[j]
            j -= 1
        l2[j + 1] = key
    return l2




def worker_arda(id, secret, q_request, q_reply):
    #Namen setzen
    q_request.put(('SET_NAME', 'Arda', secret, id))
    reply_x = q_reply.get()
    #Abfrage der Puckanzahl
    q_request.put(('GET_SIZE', id))
    reply_y = q_reply.get()
    N = reply_y[1]
    #for n in range(0, N): 
    #q_request.put(('GET_PUCK', n, id))
    #reply_puck = q_reply.get()
    #puck_z = reply_puck[1]
    #if puck_y.get_id() == id:
     #   meine_nummer = n
      #      break #n ist id

    
    
    #Boxgrenzen anfragen
    q_request.put(('GET BOX', id))
    box_grenzen = q_reply.get(('GET_BOX', box))
    box_x = box.get_x_limits()
    xmin = x_coordinate[0]
    xmax = x_coordinate[1]
    box_y = box.get_y_limits()
    ymin = y_coordinate[0]
    ymax = y_coordinate[1]
    
    
    
    while True:
        R = 1
        l1 = []
        l1.clear()
        l2 = []
        l2.clear()
        q_request.put(('GET_PUCK', meine_nummer, id))
        mein_puck = q_reply.get()[1]
        meine_position = mein_puck.get_position()
        meine_geschwindikeit = mein_puck.get_velocity()
        meine_beschleunigung = mein_puck.get_acceleration()
        #print sortierte_liste
        
        for i in range(0, N):
            q_request.put(('GET_PUCK', i, id))
            anderer_puck = q_reply.get()[1]
            andere_position = anderer_puck.get_position()
            andere_geschwindigkeit = anderer_puck.get_velocity()
            t_ca = - np.dot((andere_position - meine_position) , (andere_geschwindigkeit - meine_geschwindigkeit))/ np.dot((andere_geschwindigkeit - meine_geschwindigkeit), (andere_geschwindigkeit - meine_geschwindigkeit))
            r_ca = (andere_position - meine_position) - (andere_geschwindigkeit - meine_geschwindigkeit) * (t_ca) #vektor
            a = 2 * (2*R - np.linalg.norm(r_ca)) / (t_ca * t_ca) #skalar
            if a >= A_MAX:
                a = A_MAX
            if t_ca >= 0 or np.linalg.norm(r_ca) >= 10:
                l1.append((t_ca, r_ca, a))
                l2.append(t_ca)
        sortierte_liste = insertionSort_t_ca(l2)
        for j in range(len(l1)):
            if sortierte_liste[0] == l1[j][0]:
                sortierte_beschleunigung = - (l1[j][1] / np.linalg.norm(l1[j][1])) * l1[j][2])
        q_request.put(('SET_ACCELERATION', sortierte_beschleunigung, secret, id))
        reply_sortierte_beschleunigung = q_reply.get()
        print(f"{sortierte_beschleunigung} von puck {id}")
                
      
        #Geschwindigkeitskontrolle
        q_request.put(('GET_PUCK', meine_nummer, id))
        mein_puck_a = q_reply.get()[1]
        v_geschwindikeit = mein_puck_a.get_velocity()
        a_beschleunigung = 10 * v_geschwindigkeit / np.linalg.norm(v_geschwindigkeit) 
        if v_puck == V_MIN + 5:
            q_request.put(('SET_ACCELERATION', a_beschleunigung, secret, id))
            reply_a = q_reply.get()
        if v_puck == V_MAX - 5:       
            q_request.put(('SET_ACCELERATION', - a_beschleunigung, secret, id))
            reply_aa = q_reply.get()
        q_request.put(('SET_ACCELERATION', np.array(0,0), secret, id))
        reply_aaa = q_reply.get()
        
        if mein_puck_a.is_alive() == False:
            break
                
        #gas #gebremst
        
    
    
    
